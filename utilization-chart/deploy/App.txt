<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Utilization Chart</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sun Jul 19 2015 16:25:04 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Jul 19 2015 16:25:04 GMT-0700 (PDT)";
        var CHECKSUM = 20163498115;
    </script>
    
        <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>


    <script type="text/javascript">
        
        Rally.onReady(function() {
             
Ext.define('timebox-selector', {
    extend : 'Ext.Container',
    componentCls : 'app',
    alias : 'widget.timebox-selector',
    cls : 'timebox-selector',
    layout : 'hbox',
    width : '100%',
    mixins : [
        'Rally.Messageable'
    ],
    constructor : function()
    {
        this.stateId = Rally.environment.getContext().getScopedStateId('timebox-filter');
        this.callParent(arguments);
    },
    initComponent : function()
    {
        this.callParent(arguments);
        this._createReleaseCombo();
        this.addEvents('releasechange','iterationchange');
        
        // configured to allow others to ask what the current selection is,
        // in case they missed the initial message
        this.subscribe(this, 'requestTimebox', this._requestTimebox, this);
        
    },
    _createReleaseCombo : function()
    {
        this._releaseCombo = this.add({
            xtype : 'rallyreleasecombobox',
            fieldLabel : 'Program Increment',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 130,
            width : 280,
            labelAlign : 'right',
            stateful : false,
            stateId : 'releasecombo',
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            defaultToCurrentTimebox : true,
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var release = t.getRecord();
                    this.fireEvent('releasechange',release);
                    console.log("Publishing Release:", release);
                    this.publish('timeboxReleaseChanged', release);
                    this._updateIterationCombo(release);
                },
                scope : this
            }
        });
    },
    _updateIterationCombo : function(release)
    {
        this.remove('globaliterationpicker');
        this.fireEvent('iterationchange',null);
        this.publish('timeboxIterationChanged', null);
                    
        var endFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "EndDate",
            operator : "<=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseDate'))
        });
        var startFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "StartDate",
            operator : ">=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate'))
        });
        var filters = endFilter.and(startFilter);

        this._iterationCombo = this.add({
            xtype : 'rallyiterationcombobox',
            itemId : 'globaliterationpicker',
            fieldLabel : 'Sprint/Iteration',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 100,
            labelAlign : 'right',
            stateful : false,
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            stateId : 'iterationcombo',
            allowBlank : true,
            allowClear : true,
            allowNoEntry : true,
            noEntryText : 'PI Scope',
            emptyText : 'PI Scope',
            noEntryValue : null,
            defaultToCurrentTimebox : false,
            defaultSelectPosition : 'first',
            storeConfig : {
                remoteFilter : true,
                filters : filters
            },
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var iteration = t.getRecord();
                    this.fireEvent('iterationchange',iteration);
                    this.publish('timeboxIterationChanged', iteration);
                },
                scope : this
            }
        });
    },
    _requestTimebox : function(source) {
        console.log('Got request timebox message', source);
        var release = this.getReleaseRecord();
        console.log('release',release);
        if (release) {
            this.publish('timeboxReleaseChanged', release);
        } 
        
        var iteration = this.getIterationRecord();
        console.log('iteration', iteration);
        if (iteration) {
            this.publish("timeboxIterationChanged",  iteration);
        }
    },
    getReleaseRecord: function(){
        if (this._releaseCombo){
            return this._releaseCombo.getRecord() || null;
        }
        return null;
    },
    getIterationRecord: function(){
        if (this._iterationCombo){
            return this._iterationCombo.getRecord() || null;
        }
        return null;
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.ModelBuilder',{
    singleton: true,

    build: function(modelType, newModelName, field_cfgs) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Rally.data.ModelFactory.getModel({
            type: modelType,
            success: function(model) {

                var default_fields = [{
                    name: '__startScope',
                    displayName: 'Start Stability'
                },{
                    name: '__endScope',
                    displayName: 'End Stability'
                },{
                    name: '__endAcceptance',
                    displayName: 'End Acceptance'
                },{
                    name: '__days',
                    convert: function(value, record){
                        // this is an array of dates (end of the day) that the daily fields correspond to
                        if ( Ext.isEmpty(record.get('StartDate')) ) {
                            return [];
                        }
                        if ( Ext.isEmpty(record.get('EndDate')) ) {
                            return [];
                        }
                        
                        var first_day = Rally.util.DateTime.add(Rally.util.DateTime.add(record.get('StartDate'),'day', 1),'second',-1);
                        var last_day = record.get('EndDate');
                        var array_of_days = [];
                        var check_day = first_day;
                        while ( check_day <= last_day ) {
                            array_of_days.push(check_day);
                            check_day = Rally.util.DateTime.add(check_day,'day',1);
                        }
                        return array_of_days;
                    },
                    displayName: 'Days'
                },{
                    name: '__dailyScope',
                    defaultValue:  [],
                    displayName: 'Daily Stability'
                },{
                    name: '__dailyAcceptance',
                    defaultValue: [],
                    displayName: 'Daily Acceptance'
                }];
                
                var fields = Ext.Array.merge(default_fields, field_cfgs);
                var new_model = Ext.define(newModelName, {
                    extend: model,
                    fields: fields,
                    setCFD: me._setCFD
                        
                });
                deferred.resolve(new_model);
            }
        });

        return deferred;
    },
    
    // sometimes, dates are provided as beginning of day, but we 
    // want to go to the end of the day
    shiftToEndOfDay: function(js_date) {
        return Rally.util.DateTime.add(Rally.util.DateTime.add(js_date,'day',1),'second',-1);
    },
    
    isAccepted: function(state) {
        return ( state == 'Accepted' );
    },
    
    _setCFD: function(cfd_array) {
        var days = this.get('__days');
        
        var my_oid = this.get('ObjectID');
        
        // set scope to nulls every day
        var daily_scope = Ext.Array.map( days, function(day){ return null; });
        var daily_acceptance = Ext.Array.map( days, function(day){ return null; });
        
        var total_by_day = {};
        var acceptance_by_day = {};
        
        Ext.Array.each(cfd_array, function(cfd){
            var cfd_oid = cfd.get('IterationObjectID');
            
            if ( Ext.isEmpty(cfd_oid) || Ext.isEmpty(my_oid) || my_oid == cfd_oid ) {
                
                var card_total = cfd.get('CardEstimateTotal') || 0;
                var day = Rally.technicalservices.ModelBuilder.shiftToEndOfDay(cfd.get('CreationDate'));
                
                if (!total_by_day[day]) { total_by_day[day] = 0; }
                
                total_by_day[day] += card_total;

                if ( Rally.technicalservices.ModelBuilder.isAccepted(cfd.get('CardState')) ) {
                    if (!acceptance_by_day[day]) { acceptance_by_day[day] = 0; }
                    acceptance_by_day[day] += card_total;
                }
            }
        });

        Ext.Array.each(days, function(day,idx){
            if ( total_by_day[day] ) {
                daily_scope[idx] = total_by_day[day];
            }
            if ( acceptance_by_day[day] ) {
                daily_acceptance[idx] = acceptance_by_day[day];
            }
        });
        
        this.set('__dailyScope',daily_scope);
        if ( daily_scope.length > 0 ) {
            this.set('__startScope',daily_scope[0]);
            this.set('__endScope',daily_scope[daily_scope.length - 1]);
        }
        
        this.set('__dailyAcceptance',daily_acceptance);
        if ( daily_acceptance.length > 0 ) {
            this.set('__endAcceptance',daily_acceptance[daily_acceptance.length - 1]);
        }
    }
});
Ext.define('Rally.technicalservices.chart.Utilization',{
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsutilizationchart',

    /**
     * __startScope
     * __endScope
     * __days
     * __endAcceptance
     * __dailyScope
     * __dailyAcceptance
     * Name
     * Project
     * StartDate
     * EndDate
     * PlannedVelocity
     *
     * For each project, graphs:
     *   __dailyScope
     *   __dailyAcceptance
     *
     */
    config: {

        loadMask: false,

        chartData: {
            series: []
        },
        chartConfig: {

            colors: [ '#2f7ed8', '#8bbc21', '#910000',
            '#492970', '#f28f43', '#145499','#77a1e5', '#c42525', '#a6c96a',
            '#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9','#aa1925',
            '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1','#1aadce',
            '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',
            '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],

            chart: {
                height: 300
            },
            title: {
                text: '',
                align: 'center'
            },
            legend: {
                enabled: false
            },
            xAxis: {
                categories:  [],
                title: { text: 'Days' }
            },
            yAxis: [{
                title: { text: 'Points' },
                min: 0
            }],
            plotOptions: {}
        },

        records: undefined,

        zoomToIteration: true

    },
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    initComponent: function() {
        this.addEvents('legendupdated');
        this.callParent(arguments);

        if (this.zoomToIteration){
            this._initIterationChart();
        } else {
            this._initReleaseChart();
        }
    },
    toggleColor: function(color){
        _.each(this.getChart().series, function(s){
            if (s && s.color == color){
                if (s.visible){
                    s.hide();
                } else {
                    s.show();
                }
            }
        });
    },
    toggleShape: function(shape){
        _.each(this.getChart().series, function(s){
            if (s && s.marker.symbol == shape){
                if (s.visible){
                    s.hide();
                } else {
                    s.show();
                }
            }
        });
    },
    _initIterationChart: function(){

        var categories = _.map(this.records[0].get('__days'), function(d){
            return Rally.util.DateTime.format(d, 'M-d')
        });

        var series = [],
            colors = this.chartConfig.colors,
            color_index = 0;

        _.each(this.records, function(r){
            series.push({
                name: r.getField('__dailyAcceptance').displayName,
                data: this._padArray(r.get('__dailyAcceptance'), categories.length),
                color: colors[color_index],
                marker: { symbol:'triangle-down'}
            });

            series.push({
                name: r.getField('__dailyScope').displayName,
                data: this._padArray(r.get('__dailyScope'), categories.length),
                color: colors[color_index],
                marker: { symbol:'circle'}
            });

            series.push({
                name: r.getField('PlannedVelocity').displayName,
                data: this._padArray([], categories.length, r.get('PlannedVelocity')),
                color: colors[color_index],
                marker: { symbol:'square'}
            });


            r.set('__color', colors[color_index]);
            color_index++;
        }, this);

        this.chartConfig.xAxis.categories = categories;
        this.chartData.series = series;
        this.chartData.categories = categories;

        this.fireEvent('legendupdated', series);

        console.log(this.chartConfig.xAxis.categories, this.chartData);
    },

    _padArray: function(array, desired_length,padding_value){
        var new_array = Ext.clone(array);
        padding_value = padding_value || null;
        while (new_array.length < desired_length){
            new_array.push(padding_value);
        }
        return new_array;
    },
    _initReleaseChart: function(){},
    //Overriding this function because we want to set colors ourselves.
    _setChartColorsOnSeries: function (series) {
        return null;
    }
});

Ext.define('Rally.technicalservices.grid.Legend', {
    extend: 'Rally.ui.grid.Grid',
    alias: 'widget.tslegendgrid',
    config: {
        series: undefined,
        columnCfgs: [],
        showRowActionsColumn: false,
        enableBulkEdit: false,
        padding: 10
    },
    constructor: function (config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    initComponent: function () {
        this.store = Ext.create('Rally.data.custom.Store',{
            data: this.records
        });
        this.columnCfgs = this._getColumnCfgs();
        this.addEvents('colorclicked');
        this.callParent(arguments);
    },
    _getColumnCfgs: function(){
        var me = this;

        return [{
            xtype:'actioncolumn',
            dataIndex: '__color',
            width: 24,
            handler: function(grid, rowIndex, colIndex, item) {
                var rec = grid.getStore().getAt(rowIndex);
                //Todo make background color gray when unclicked
                me.fireEvent('colorclicked', rec);
            },
            renderer: function(v, m, r){
                m.style = "background-color:" + r.get('__color');
                m.tdCls = "grid-legend-show-action"
            }
        },{
            dataIndex: 'Project',
            text: 'Project',
            flex: 3,
            renderer: this._projectNameRenderer
        },{
            dataIndex: 'Name',
            flex: 2,
            text: 'Iteration'
        },{
            dataIndex:'StartDate',
            text:'Start',
            flex: 2,
            renderer: this._dateRenderer
        },{
            dataIndex:'EndDate',
            text:'End',
            flex: 2,
            renderer: this._dateRenderer
        },{
            dataIndex:'PlannedVelocity',
            text:'&#9632; Potential (Planned)',
            flex: 1,
            editor: 'rallynumberfield',
            sortable: false
        },{
            dataIndex:'__startScope',
            flex: 1,
            text:'&#9679; Points at Start (Stability)',
            sortable: false
        },{
            dataIndex:'__endScope',
            flex: 1,
            text:'&#9679; Points at End (Stability)',
            sortable: false
        },{
            dataIndex:'__endAcceptance',
            flex: 1,
            text:'&#9660; Accepted at End',
            sortable: false
        }];
     },
    _dateRenderer: function(value){
        //todo make ordinals
        return Ext.util.Format.date(value,'Y-m-d');
    },
    
    _projectNameRenderer: function(value) {
        if ( !Ext.isEmpty(value) ) {
            var name_array = value.Name.split('>');
            return name_array[name_array.length - 1];
        }
        
        return value;
    },
    
    _objectNameRenderer: function(value){
        if (value && value.Name){
            return value.Name;
        }
        return value;
    }
});
Ext.define("utilization-chart", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'settings_box'},
        {xtype:'container',itemId:'selector_box'},
        {xtype:'container',itemId:'chart_box', margin: 5, padding: 10, flex: 1},
        {xtype:'container',itemId:'grid_box',  margin: 5, padding: 10, flex: 1},
        {xtype:'tsinfolink'}
    ],

    config: {
        defaultSettings: {
            zoomToIteration:  true
        }
    },
    
    launch: function() {
        
        if (this.isExternal()){
            this.showSettings(this.config);
        } else {
            this.onSettingsUpdate(this.getSettings());
        }
    },
    
    _launch: function(settings) {
        var me = this;
        
        this.logger.log("Settings:", settings);
        if ( settings.showScopeSelector == true || settings.showScopeSelector == "true" ) {
            this.down('#selector_box').add({
                xtype : 'timebox-selector',
                context : this.getContext(),
                listeners: {
                    releasechange: function(release){
                        this._changeRelease(release);
                    },
                    iterationchange: function(iteration){
                        this._changeIteration(iteration);
                    },
                    scope: this

                }
            });
        } else {
            this.subscribe(this, 'timeboxReleaseChanged', this._changeRelease, this);
            this.subscribe(this, 'timeboxIterationChanged', this._changeIteration, this);

            this.publish('requestTimebox', this);
        }
        
    },
    
    _changeRelease: function(release) {
//        var me = this;
//        var settings = this.getSettings();
//        this.logger.log("Release Changed:", release);
//        
//        if ( settings.zoomToIteration == false || settings.zoomToIteration == "false" ) {            
//            var name = release.get('Name');
//
//            var filter = [{property:'Name',value:name}];
//                        
//            me._loadAStoreWithAPromise('Release', ['ReleaseStartDate','ReleaseDate','Name'], filter ).then({
//                scope: me,
//                success: function(releases) {
//                    if (releases.length == 0) {
//                        me.down('#chart_box').add({ xtype:'container', html:'No releases in scope'});
//                    } else {
//                        me._gatherData(releases[0]);
//                    }
//                }
//            });
//                    
//        }
    },
    
    _changeIteration: function(iteration) {
        var me = this;
        var settings = this.getSettings(),
            zoom_to_iteration = settings.zoomToIteration == true || settings.zoomToIteration == "true" ;
        this.logger.log("Iteration changed:", iteration);
        
        if ( !Ext.isEmpty(iteration) && zoom_to_iteration) {
            
            me.setLoading('Loading iteration ' + iteration.get('Name') );
            
            Rally.technicalservices.ModelBuilder.build('Iteration','Utilization',[]).then({
                scope: this,
                success: function(model){
                    var name = iteration.get('Name');
                    var filter = [{property:'Name',value: name}];
                    var fields = ['Name','Project','EndDate','StartDate','PlannedVelocity'];

                    Deft.Chain.pipeline([
                        function() { return me._loadAStoreWithAPromise(model, fields, filter ); }, 
                        function(iterations) { 
                            me.setLoading('Loading Cumulative Flow Data...');
                            return me._associateCFDsWithIterations(iterations);
                        }
                    ]).then({
                        scope: me,
                        success: function(calculated_iterations) {
                            me.logger.log('Iterations: ', calculated_iterations);
                            me.setLoading(false);
                            
                            me._buildChart(calculated_iterations, zoom_to_iteration);
                            me._buildGrid(calculated_iterations, zoom_to_iteration);
                        },
                        failure: function(msg) {
                            Ext.Msg.alert('!', msg);
                        }
                    });
                }
            }).always(function() { me.setLoading(false); });
        }
    },
    getChart: function(){
        return this.down('tsutilizationchart');
    },
    _buildChart: function(iterations, zoom_to_iteration){
        var me = this;

        this.down('#chart_box').removeAll();
        this.down('#grid_box').removeAll();

        this.down('#chart_box').add({
            xtype: 'tsutilizationchart',
            records: iterations,
            zoomToIteration: zoom_to_iteration
        });
    },
    _buildGrid: function(iterations, zoom_to_iterations){
        this.down('#grid_box').add({
            xtype: 'tslegendgrid',
            records: iterations,
            listeners: {
                scope: this,
                colorclicked: function(record){
                    this.getChart().toggleColor(record.get('__color'))
                },
                headerclick: function( grid, column ) {
                    //this.getChart().toggleSeriesType(column.dataIndex);
                }
            }
        });
    },
    
    _associateCFDsWithIterations: function(iterations) {
        var deferred = Ext.create('Deft.Deferred');
        
        var fetch_fields =  ['CardEstimateTotal','CardState','CreationDate','IterationObjectID'];
        var start_date = Rally.util.DateTime.toIsoString(iterations[0].get('StartDate'));
        var end_date   = Rally.util.DateTime.toIsoString(iterations[0].get('EndDate'));
        
        var filters = [
            {property: 'CreationDate', operator: '>=', value:start_date},
            {property: 'CreationDate', operator: '<=', value:  end_date}
        ];
        
        this._loadAStoreWithAPromise('IterationCumulativeFlowData', fetch_fields, filters ).then({
            success: function(cfds) {
                Ext.Array.each(iterations, function(iteration){
                    iteration.setCFD(cfds);
                });
                deferred.resolve(iterations);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _loadAStoreWithAPromise: function(model, model_fields, filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        this.logger.log("Starting load:",model,model_fields, filters);
          
        var store = Ext.create('Rally.data.wsapi.Store', {
            model: model,
            fetch: model_fields,
            filters: filters,
            limit: 'Infinity'
        }).load({
            callback : function(records, operation, successful) {                
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

     /********************************************
     /* Overrides for App class
     /*
     /********************************************/
    //getSettingsFields:  Override for App
    getSettingsFields: function() {
        var me = this;

        return [ 
            {
                name: 'showScopeSelector',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 200',
                boxLabel: 'Show Scope Selector<br/><span style="color:#999999;"><i>Tick to use this to broadcast settings.</i></span>'
            },
            {
                name: 'zoomToIteration',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 200',
                boxLabel: 'Show by Iteration<br/><span style="color:#999999;"><i>If <strong>not</strong> ticked, show by iterations in the selected release.</i></span>'
            }
        ];
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //showSettings:  Override
    showSettings: function(options) {
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            fields: this.getSettingsFields(),
            settings: this.getSettings(),
            defaultSettings: this.getDefaultSettings(),
            context: this.getContext(),
            settingsScope: this.settingsScope,
            autoScroll: true
        }, options));

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        if (this.isExternal()){
            if (this.down('#settings_box').getComponent(this._appSettings.id)==undefined){
                this.down('#settings_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    
    _onSettingsSaved: function(settings){
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this._launch(settings);
    }
});

            
               Rally.launchApp('utilization-chart', {
                   name: 'Utilization Chart'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.grid-legend-show-action {
    width: 18px;
    height: 18px;
    border-radius: 3px;
    text-align: center;
    color: white;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}
.grid-legend-hide-action {
    width: 18px;
    height: 18px;
    border-radius: 3px;
    text-align: center;
    background-color: white;
    border-style: solid;
    border-width: 2px;
    display: inline-block;
}
.button-circle {
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    background-color: dimgray;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}
.button-square {
    width: 14px;
    height: 14px;
    border-radius: 0px;
    text-align: center;
    background-color: dimgray;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}
    </style>

</head>
<body></body>
</html>