<!DOCTYPE html>
<html>
<head>
    <title>Threat Matrix</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Jun 02 2015 13:56:08 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Jun 02 2015 13:56:08 GMT-0600 (MDT)";
        var CHECKSUM = 14202935327;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc2/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.ThreatCalculator', {
    logger: new Rally.technicalservices.Logger(),

    chartColors: [ '#2f7ed8', '#8bbc21', '#910000',
        '#492970', '#f28f43', '#145499','#77a1e5', '#c42525', '#a6c96a',
        '#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9','#aa1925',
        '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1','#1aadce',
        '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',
        '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],

    config: {
        riskField: undefined,
        currentProjectRef: undefined,
        projects: undefined,
        maxAgeThreshhold: undefined,
        minAgeThreshhold: undefined,
        minPointsThreshhold: undefined,
        storySizeMultiplier: 1,
        andMinThreshholds: true
    },
    /**
     * projectTree is used to show the hierarchy of the projects so that we can
     * determine which items to show (vs. which to include in the calculations)
     */
    projectTree: {},

    defaultColor: '#C0C0C0',
    colorMap: {},

    /**
     *     Symbol for anything not in the symbol map;
     *     I'm intentionally keeping features out of the symbol map and
     *     making the symbol the default since names can change.  If we
     *     add tasks to this chart, then we will add the tAsk object to
     *     the SymbolMap
     */
    defaultSymbol: "square",
    symbolMap: {
        hierarchicalrequirement: "circle"
    },
    sizeMultiplierMap: {
        hierarchicalrequirement: 2
    },
    constructor: function (config) {
        this.mergeConfig(config);
        this.projectTree = this._getTreeArray(config.projects, config.currentProjectRef);
        this.colorMap = this._buildColorMap(this.projectTree);
    },

    runCalculation: function(features, stories){

        var featureStoryHash = {},
            series = [],
            promises = [];

        _.each(stories, function(s){

            s.set('riskCount', this._getRiskScore(s));
            s.set('totalCount', 1);
            s.set('size', s.get('PlanEstimate') );
            s.set('density', this._getRiskScore(s) * 100);
            s.set('age', this._getAge(s, 'InProgressDate', this.maxAgeThreshhold));
            if (s.get('Feature')){
                featureStoryHash[s.get('Feature')._ref] = featureStoryHash[s.get('Feature')._ref] || [];
                featureStoryHash[s.get('Feature')._ref].push(s);
            }
            if (this._includeInChart(s)){
                //promises.push(this._getPredecessors(artifact));
                series.push(this._getSeries(s));
            }
        }, this);

        _.each(features, function(f){
            var riskCount = 0, totalCount = 0;
            f.set('age', this._getAge(f, 'ActualStartDate', this.maxAgeThreshhold));
            _.each(featureStoryHash[f.get('_ref')], function(s){
                totalCount ++;
                riskCount+= s.get('riskCount');
            }, this);
            f.set('riskCount', riskCount);
            f.set('totalCount', totalCount);
            f.set('size', f.get('LeafStoryPlanEstimateTotal'));
            if (f.get(this.riskField)){
                f.set('density', 100);
            } else if (totalCount > 0){
                f.set('density', riskCount/totalCount * 100);
            } else {
                f.set('density', 0);
            }
            if (this._includeInChart(f)){
                //promises.push(this._getPredecessors(artifact));
                series.unshift(this._getSeries(f));
            }
        }, this);

        //Deft.Promise.all(promises).then({
        //    scope: this,
        //    success: function(){
        //        var artifacts = stories.concat(features);
        //        var series = (artifacts, function(a){
        //            if (this._includeInChart(a)){
        //                series.push(this._getSeries(a));
        //            }
        //        }, this);
        //    },
        //    failure: function(operation){
        //
        //    }
        //});

        return {series: series};
    },
    _getPredecessors: function(artifact){
        var deferred = Ext.create('Deft.Deferred');

        if (artifact.get('Predecessors') && artifact.get('Predecessors').Count > 0 ){
            var predStore = artifact.getCollection('Predecessors');
            predStore.load({
                scope: this,
                fetch: ['ObjectID'],
                callback: function(records, operation, success){
                    var predecessorOids = [];
                    if (success) {
                        _.each(records, function(r){
                            predecessorOids.push(r.get('ObjectID'));
                        });
                        artifact.set('predecessorOids', predecessorOids);
                        deferred.resolve();
                    } else {
                        deferred.resolve(operation);
                    }
                }
            });
        }
        return deferred;
    },
    _includeInChart: function(artifact) {
        //Check project scope
        var projectRef = artifact.get('Project')._ref;

        var include = this.projectTree.get('_ref') == projectRef;
        if (!include) {
            _.each(this.projectTree.get('Children'), function (child) {
                if (child.get('_ref') == projectRef) {
                    include = true;
                    return false; //kick us out of the _.each link
                }
            }, this);
        }

        if (!include) { //Don't go any further
            return false;
        }

        var size = artifact.get('size'),
            age = artifact.get('age');

        if (this.andMinThreshholds && (size < this.minPointsThreshhold) && (age < this.minAgeThreshhold)) {
            return false;
        }
        return (size >= this.minPointsThreshhold) || (age >= this.minAgeThreshhold);

    },
    _buildColorMap: function(projectTree){
        var colorMap = {},
            i=0;

        //We only need to do this for the current and child projects since we are only looking at one
        //level of hierarchy at a time.
        colorMap[projectTree.get('_ref')] = this.chartColors[i++];
        _.each(projectTree.get('Children'), function(child){
            colorMap[child.get('_ref')] = this.chartColors[i++];
        }, this);
        return colorMap;
    },
    _getSeries: function(artifact){
        this.logger.log('id, size, age, density',artifact.get('FormattedID'),artifact.get('size'),artifact.get('age'), artifact.get('density'))

        var pointName = Ext.String.format("{0}<br/>Project: {1}<br/>Size: {2}<br/>Age (days): {3}", artifact.get('FormattedID'),
                            artifact.get('Project').Name,
                            artifact.get('size'), artifact.get('age').toFixed(1)),
            color = this._getColor(artifact);

        return {
            marker: {
                radius: this._getRadius(artifact),
                symbol: this._getSymbol(artifact),
                fillColor: color
            },
            color: color,
            name: pointName,
            project: artifact.get('Project').Name,
            data: [[artifact.get('age'),artifact.get('density')]],
            showInLegend: false
        };
    },
    _getRadius: function(artifact){
        var sizeMultiplier = this.sizeMultiplierMap[artifact.get('_type')] || 1;
        return artifact.get('size') * sizeMultiplier;
    },
    _getColor: function(artifact){
        var hexColor = this.colorMap[artifact.get('Project')._ref] || this.defaultColor;
        return this._hexToRGBAColorString(hexColor, '.5');
    },
    _getSymbol: function(artifact){
        return this.symbolMap[artifact.get('_type')] || "square";
    },
    _getRiskScore: function(story){
        return story.get(this.riskField) ? 1 : 0;
    },
    _getAge: function(artifact, ageField, maxAgeThreshhold){
       var ageInHours = Rally.util.DateTime.getDifference(new Date(), Rally.util.DateTime.fromIsoString(artifact.get(ageField)), 'hour') || 0,
           ageInDays = ageInHours / 24;

        if (maxAgeThreshhold){
           return Math.min(ageInDays, maxAgeThreshhold);
       }
       return ageInDays;

    },
    _hexToRGBAColorString: function(hex, alpha) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

        if (result){
            return Ext.String.format("rgba({0},{1},{2},{3})",
                parseInt(result[1], 16),
                parseInt(result[2], 16),
                parseInt(result[3], 16),
                alpha
            );
        }
        return hex;
    },
    _getTreeArray:function(records, currentProjectRef) {

        var projectHash = {};
        _.each(records, function(rec){
            projectHash[rec.get('ObjectID')] = rec;

        });
        var current_root = null;


        var root_array = [];
        Ext.Object.each(projectHash, function(oid,item){

            if ( !item.get('Children') ) { item.set('Children',[]); }
            var direct_parent = item.get('Parent');
            if (!direct_parent && !Ext.Array.contains(root_array,item)) {
                root_array.push(item);
            } else {

                var parent_oid =  direct_parent.ObjectID || direct_parent.get('ObjectID');

                if (!projectHash[parent_oid]) {
                    if ( !Ext.Array.contains(root_array,item) ) {
                        root_array.push(item);
                    }
                } else {
                    var parent = projectHash[parent_oid];
                    if ( !parent.get('Children') ) { parent.set('Children',[]); }
                    var kids = parent.get('Children');
                    kids.push(item);
                    parent.set('Children',kids);
                }
            }
            if (item.get('_ref') == currentProjectRef){
                current_root = item;
            }
        },this);

        return current_root;
    },
    _getSampleSeries: function(){
        return [{
            marker: {
                radius: 15
            },

            name: 'Feature 1',
            color: 'rgba(223, 83, 83, .5)',
            data: [
                [61.2, 51.6],
                [67.5, 59.0],
                [59.5, 49.2],
                [57.0, 63.0],
                [55.8, 53.6],
                [70.0, 59.0],
                [59.1, 47.6]
            ]

        }, {
            marker: {
                radius: 25
            },

            name: 'Feature 2',
            color: 'rgba(255, 255, 0, .5)',
            data: [
                [31.2, 51.6],
                [57.5, 59.0],
                [49.5, 49.2],
                [87.0, 63.0],
                [95.8, 53.6],
                [20.0, 59.0],
                [19.1, 47.6]
            ]

        }, {
            marker: {
                radius: 5
            },

            name: 'Feature 3',
            color: 'rgba(119, 152, 191, .5)',
            data: [
                [74.0, 65.6],
                [75.3, 71.8],
                [93.5, 80.7],
                [86.5, 72.6],
                [87.2, 78.8],
                [81.5, 74.8],
                [84.0, 86.4],
                [73.5, 81.8]
            ]
        },  {
            marker: {
                radius: 20
            },

            name: 'Feature 4',
            color: 'rgba(255, 0, 100, .5)',
            data: [
                [34.0, 55.6],
                [85.3, 51.8],
                [43.5, 30.7],
                [66.5, 82.6],
                [57.2, 38.8],
                [21.5, 24.8],
                [44.0, 56.4],
                [33.5, 41.8]
            ]
        }];
    }
});
Ext.define('Rally.technicalservices.ThreatChart',{
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsthreatchart',

    chartData: {},
    loadMask: false,
    chartConfig: {
        chart: {
            type: 'scatter',
            zoom: 'xy'
        },
        title: {
            text: 'Threat Matrix'
        },
        loadMask: false,
        legend: {
            enabled: false
        },
        xAxis: {
            min: 0,
            title: {
                text: 'Age (days)'
            },
            startOnTick: true,
            endOnTick: true,
            showLastLabel: true
        },
        yAxis: [
            {
                title: {
                    text: '%Density'
                }
            }
        ],
        plotOptions: {
            series: {
                type: "scatter",
                tooltip: {
                    pointFormat: ''
                }
            }
        }
    },
    constructor: function (config) {
        this.callParent(arguments);
        if (config.title){
            this.chartConfig.title = config.title;
        }
    }
});

Ext.define("threat-matrix", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'settings_box'},
    ],

    config: {
        defaultSettings: {
            minAgeThreshhold:  1,
            maxAgeThreshhold: 365,
            minPointsThreshhold: 1
        }
    },
    storyFetchFields: ['FormattedID','c_Risk','PlanEstimate','Project','ScheduleState','InProgressDate','Blocked','Blocker','CreationDate','Feature','Name','Predecessors'],
    featureFetchFields: ['FormattedID','Project','ActualStartDate','ActualEndDate','LeafStoryPlanEstimateTotal', 'LeafStoryCount','Name', 'c_Risk','Predecessors'],
    portfolioItemFeature: 'PortfolioItem/Feature',
    projectFetchFields: ['Name','Parent','ObjectID'],
    riskField: 'c_Risk',
    ageGranularity: 'day',

    launch: function() {
        if (this.isExternal()){
            this.showSettings(this.config);
        } else {
            this.onSettingsUpdate(this.getSettings());
        }
    },

    getReleaseFilters: function(release){

        if (!release){
            release = this.getReleaseRecord();
        }

        return [{
            property: 'Release.Name',
            value: release.get('Name')
        },{
            property: 'Release.ReleaseStartDate',
            value: Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate'))
        },{
            property: 'Release.ReleaseDate',
            value: Rally.util.DateTime.toIsoString(release.get('ReleaseDate'))
        }];
    },

    getStoryFilters: function(release, iteration){
        this.logger.log('getStoryFilters',release,iteration);
        var filters = this.getReleaseFilters(release);

        var iteration_start_date = Rally.util.DateTime.toIsoString(iteration.get('StartDate')),
            iteration_end_date = Rally.util.DateTime.toIsoString(iteration.get('EndDate'));

        filters = filters.concat([{
            property: 'Iteration.StartDate',
            value: iteration_start_date
        },{
            property: 'Iteration.EndDate',
            value: iteration_end_date
        },{
            property: 'Iteration.Name',
            value: iteration.get('Name')
        },{
            property: 'ScheduleState',
            value: 'In-Progress'
        }]);

        filters = Rally.data.wsapi.Filter.and(filters);

        this.logger.log('filters', filters.toString());
        return filters;
    },

    onTimeboxUpdated: function(release, iteration){
        //comment out once we get the message bus working
        iteration = this.getIterationRecord(),
        release = this.getReleaseRecord();

        this.logger.log('onTimeboxUpdated',release, iteration);
        if (release && iteration){
            this.getBody().removeAll();
            this.setLoading(true);

            var promises = [
                this._fetchData(this.portfolioItemFeature, this.featureFetchFields, this.getReleaseFilters(release)),
                this._fetchData('HierarchicalRequirement', this.storyFetchFields, this.getStoryFilters(release, iteration)),
                this._fetchData('Project', this.projectFetchFields,[])
            ];

            Deft.Promise.all(promises).then({
                scope: this,
                success: function(records){
                    this.setLoading(false);
                    this.logger.log('_fetchData success', records);

                    var calc = Ext.create('Rally.technicalservices.ThreatCalculator',{
                        ageGranularity: this.ageGranularity,
                        riskField: this.riskField,
                        currentProjectRef: this.getContext().getProjectRef(),
                        projects: records[2],
                        minAgeThreshhold: this.getSetting('minAgeThreshhold'),
                        maxAgeThreshhold: this.getSetting('maxAgeThreshhold'),
                        minPointsThreshhold: this.getSetting('minPointsThreshhold')
                    });
                    var chartData = calc.runCalculation(records[0],records[1]);
                    this.getBody().add({
                        xtype: 'tsthreatchart',
                        itemId: 'rally-chart',
                        chartData: chartData,
                        title: 'Threat Matrix'
                    });
                    this.logger.log('series', chartData)
                },
                failure: function(operation){
                    this.setLoading(false);
                    this.logger.log('_fetchData failure', operation);
                }
            });
        }
    },
    _fetchData: function(modelType, fetchFields, filters){
        this.logger.log('_fetchData',modelType, fetchFields, filters);
        var deferred = Ext.create('Deft.Deferred'),
            store = Ext.create('Rally.data.wsapi.Store',{
                model: modelType,
                limit: 'Infinity',
                fetch: fetchFields,
                filters: filters,
                context: {
                    workspace: this.getContext().getWorkspace()._ref,
                    project: this.getContext().getProjectRef(),
                    projectScopeDown: this.getContext().getProjectScopeDown(),
                    projectScopeUp: false
                }
            });

        store.load({
            scope: this,
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation);
                }
            }
        });
        return deferred;
    },
    addComponents: function(){
        this.logger.log('addComponents');
        var cb = this.getHeader().add({
            xtype: 'rallyreleasecombobox',
            itemId: 'cb-release',
            fieldLabel: 'Release',
            labelAlign: 'right',
            allowNoEntry: false,
            width: '300'
        });
        cb.on('change', this.onTimeboxUpdated,this);

        var cb = this.getHeader().add({
            xtype: 'rallyiterationcombobox',
            itemId: 'cb-iteration',
            fieldLabel: 'Iteration',
            labelAlign: 'right',
            allowNoEntry: false,
            width: '300'
        });
        cb.on('change', this.onTimeboxUpdated,this);
    },

    getIterationRecord: function(){
        if (this.down('#cb-iteration')){
            return this.down('#cb-iteration').getRecord();
        }
        return null;
    },
    getReleaseRecord: function(){
        if (this.down('#cb-release')){
            return this.down('#cb-release').getRecord();
        }
        return null;
    },
    getHeader: function(){
        this.logger.log('getHeader');

        if (this.down('#ct-header')){
            return this.down('#ct-header');
        }

        return this.add({
            xtype: 'container',
            itemId: 'ct-header',
            layout: {type: 'hbox'}
        });
    },

    getBody: function(){
        this.logger.log('getBody');

        if (this.down('#ct-body')){
            return this.down('#ct-body');
        }
        return this.add({
            xtype: 'container',
            itemId: 'ct-body'
        });
    },
    /********************************************
     /* Overrides for App class
     /*
     /********************************************/
    //getSettingsFields:  Override for App
    getSettingsFields: function() {
        var me = this;

        return [
            {
                name: 'maxAgeThreshhold',
                xtype: 'rallynumberfield',
                fieldLabel: 'Max age threshold (days)',
                labelWidth: 200,
                labelAlign: 'right',
                minValue: 0
            },
            {
                name: 'minAgeThreshhold',
                xtype: 'rallynumberfield',
                fieldLabel: 'Min age threshold (days)',
                labelWidth: 200,
                labelAlign: 'right',
                 minValue: 0
            },{
                name: 'minPointsThreshhold',
                xtype: 'rallynumberfield',
                fieldLabel: 'Min points threshold',
                labelWidth: 200,
                labelAlign: 'right',
                 minValue: 0
            }
        ];
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    //showSettings:  Override
    showSettings: function(options) {
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            fields: this.getSettingsFields(),
            settings: this.getSettings(),
            defaultSettings: this.getDefaultSettings(),
            context: this.getContext(),
            settingsScope: this.settingsScope,
            autoScroll: true
        }, options));

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        if (this.isExternal()){
            if (this.down('#settings_box').getComponent(this._appSettings.id)==undefined){
                this.down('#settings_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    _onSettingsSaved: function(settings){
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.addComponents();
    }
});

            
               Rally.launchApp('threat-matrix', {
                   name: 'Threat Matrix'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>