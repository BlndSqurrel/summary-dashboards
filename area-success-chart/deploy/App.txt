<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Area Success Chart</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sat Aug 15 2015 09:55:20 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sat Aug 15 2015 09:55:20 GMT-0600 (MDT)";
        var CHECKSUM = 5701850384;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                         deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){

                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        var i = -1, l = arguments.length, args = [], fn = 'console.log(args)';
        while(++i<l){
            args.push('args['+i+']');
        };
        fn = new Function('args',fn.replace(/args/,args.join(',')));
        fn(arguments);
    }

});

Ext.define("AreaSuccessChart", {
    extend : 'Rally.app.App',
    componentCls : 'app',
    logger : new Rally.technicalservices.Logger(),
    defaults : {
        margin : 10
    },
    items : [{
        xtype : 'container',  itemId : 'settings_box'
    }, {
        xtype : 'container',  itemId : 'selector_box'
    }, {
        xtype : 'container',  itemId : 'display_box'
    }],

    launch : function() {

        if (this.isExternal()) {
            this.showSettings(this.config);
        } else {
            this.onSettingsUpdate(this.getSettings());
        }
    },

    _launch : function(settings) {
         var that = this;

        if (settings.showScopeSelector === true
                || settings.showScopeSelector === "true") {
            this.down('#selector_box').add({
                xtype : 'timebox-selector',
                context : this.getContext(),
                listeners : {
                    releasechange : function(release) {
                        this._changeRelease(release);
                    },
                    iterationchange : function(iteration) {
                        this._changeIteration(iteration);
                    },
                    scope : this

                }
            });
        } else {
            this.subscribe(this, 'timeboxReleaseChanged', 
                this._changeRelease, this);
            this.subscribe(this, 'timeboxIterationChanged',
                    this._changeIteration, this);
            this.publish('requestTimebox', this);
        }

        // that.run(release,iteration);
    },

    _changeRelease : function(release) {
        this.run(release.get("Name"), null);
    },

    _changeIteration : function(iteration) {
        if (!Ext.isEmpty(iteration)) {
            this.run(null, iteration.get("Name"), null);
        }
    },

    run : function(releaseName, iterationName) {
        this.setLoading('Loading Data...');
        
        var chart_by_features = this.getSetting('features') === true;
        

        if ( chart_by_features ) {
            
        } else {
            this._loadStates().then();
            //this._loadItems().then();
        }
        
        this._makeChart();
    },
    
    _loadStates: function() {
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'UserStory',
            success: function(model) {
                model.getField('ScheduleState').getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        var scheduleStates = Ext.Array.map(records,function(r){ return r.get("StringValue");});
                        deferred.resolve(scheduleStates);
                    }
                });
            }
        });
        return deferred.promise;
    },
    
    _makeChart: function() {
        this.setLoading(false);
        
        var categories = ["Wilma","Fred","Pebbles"];
        
        var series = [
            {type:'column',name:'A Series 2',data:[5,0,7],stack:3},
            {type:'line',name:'A Series',data:[5,null,7],stack:3},
            {type:'column',name:'Another One', data:[3,5,12], stack: 1},
            {type:'column',name:'Another Series',data:[1,6,3],stack:1}
        ];
        
        this.down('#display_box').add({
            loadMask: false,
            xtype:'rallychart',
            chartData: {
                series: series
            },
            chartColors: ['red','blue','green','yellow'],
            chartConfig: {
                chart: {},
                title: {
                    text: 'title',
                    align: 'center'
                },
                xAxis: [{
                    categories:  categories,
                    labels: {
                        align: 'left',
                        rotation: 70
                    }
                }],
                plotOptions: {
                    series: {
                        stacking: 'normal'
                    }
                }
            }
        });
    },

    _loadItems : function(model_name, model_fields) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:", model_name, model_fields);

        Ext.create('Rally.data.wsapi.Store', {
            model : model_name,
            fetch : model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful) {
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: '
                            + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _displayGrid : function(store, field_names) {
        this.down('#display_box').add({
            xtype : 'rallygrid',
            store : store,
            columnCfgs : field_names
        });
    },

    getOptions : function() {
        return [{
            text : 'About...',
            handler : this._launchInfo,
            scope : this
        }];
    },

    _launchInfo : function() {
        if (this.about_dialog) {
            this.about_dialog.destroy();
        }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink', {});
    },

    isExternal : function() {
        return typeof(this.getAppId()) == 'undefined';
    },
    // showSettings: Override
    showSettings : function(options) {
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            fields : this.getSettingsFields(),
            settings : this.getSettings(),
            defaultSettings : this.getDefaultSettings(),
            context : this.getContext(),
            settingsScope : this.settingsScope,
            autoScroll : true
        }, options));

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        if (this.isExternal()) {
            if (this.down('#settings_box').getComponent(this._appSettings.id) === undefined) {
                this.down('#settings_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    _onSettingsSaved : function(settings) {
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    // onSettingsUpdate: Override
    onSettingsUpdate : function(settings) {
        Ext.apply(this, settings);
        this._launch(settings);
    },

    getSettingsFields : function() {
        var me = this;

        return [{
            name : 'showScopeSelector',
            xtype : 'rallycheckboxfield',
            boxLabelAlign : 'after',
            fieldLabel : '',
            margin : '0 0 25 200',
            boxLabel : 'Show Scope Selector<br/><span style="color:#999999;"><i>Tick to use this to broadcast settings.</i></span>'
        }, {
            name : 'features',
            xtype : 'rallycheckboxfield',
            boxLabelAlign : 'after',
            fieldLabel : '',
            margin : '0 0 25 200',
            boxLabel : '% based on features (otherwise stories)'
        }];
    }
});

Ext.define('timebox-selector', {
    extend : 'Ext.Container',
    componentCls : 'app',
    alias : 'widget.timebox-selector',
    cls : 'timebox-selector',
    layout : 'hbox',
    width : '100%',
    mixins : [
        'Rally.Messageable'
    ],
    constructor : function()
    {
        this.stateId = Rally.environment.getContext().getScopedStateId('timebox-filter');
        this.callParent(arguments);
    },
    initComponent : function()
    {
        this.callParent(arguments);
        this._createReleaseCombo();
        this.addEvents('releasechange','iterationchange');
        
        // configured to allow others to ask what the current selection is,
        // in case they missed the initial message
        this.subscribe(this, 'requestTimebox', this._requestTimebox, this);
        
    },
    _createReleaseCombo : function()
    {
        this._releaseCombo = this.add({
            xtype : 'rallyreleasecombobox',
            fieldLabel : 'Program Increment',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 130,
            width : 280,
            labelAlign : 'right',
            stateful : false,
            stateId : 'releasecombo',
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            defaultToCurrentTimebox : true,
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var release = t.getRecord();
                    this.fireEvent('releasechange',release);

                    this.publish('timeboxReleaseChanged', release);
                    this._updateIterationCombo(release);
                },
                scope : this
            }
        });
    },
    _updateIterationCombo : function(release)
    {
        this.remove('globaliterationpicker');
        this.fireEvent('iterationchange',null);
        this.publish('timeboxIterationChanged', null);
                    
        var endFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "EndDate",
            operator : "<=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseDate'))
        });
        var startFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "StartDate",
            operator : ">=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate'))
        });
        var filters = endFilter.and(startFilter);

        this._iterationCombo = this.add({
            xtype : 'rallyiterationcombobox',
            itemId : 'globaliterationpicker',
            fieldLabel : 'Sprint/Iteration',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 100,
            labelAlign : 'right',
            stateful : false,
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            stateId : 'iterationcombo',
            allowBlank : true,
            allowClear : true,
            allowNoEntry : true,
            noEntryText : 'PI Scope',
            emptyText : 'PI Scope',
            noEntryValue : null,
            defaultToCurrentTimebox : false,
            defaultSelectPosition : 'first',
            storeConfig : {
                remoteFilter : true,
                filters : filters
            },
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var iteration = t.getRecord();
                    this.fireEvent('iterationchange',iteration);
                    this.publish('timeboxIterationChanged', iteration);
                },
                scope : this
            }
        });
    },
    _requestTimebox : function(source) {
         var release = this.getReleaseRecord();
        if (release) {
            this.publish('timeboxReleaseChanged', release);
        } 
        
        var iteration = this.getIterationRecord();
        if (iteration) {
            this.publish("timeboxIterationChanged",  iteration);
        }
    },
    getReleaseRecord: function(){
        if (this._releaseCombo){
            return this._releaseCombo.getRecord() || null;
        }
        return null;
    },
    getIterationRecord: function(){
        if (this._iterationCombo){
            return this._iterationCombo.getRecord() || null;
        }
        return null;
    }
});
            
               Rally.launchApp('AreaSuccessChart', {
                   name: 'Area Success Chart'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>