<!DOCTYPE html>
<html>
<head>
    <title>Story Progress Pie</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Jun 02 2015 16:13:59 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Jun 02 2015 16:13:59 GMT-0700 (PDT)";
        var CHECKSUM = 2152779431;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

/*
 * For pie inside of pie --
 * 
 * Give an array of records for the inside ring and an array for the outside,
 * they should have a link via some field in the outer_ring record (e.g., Parent or WorkProduct
 * 
 * 
 */Ext.define('Rally.technicalservices.DoughnutPie',{
    extend: 'Ext.Container',
    alias: 'widget.tsdoughnut',
    padding: 5,
    
    config: {
        /**
         * @cfg [{Ext.data.Model}] 
         * Records that will each have a slice of the inside pie
         */
        inside_records: [],
        /**
         * @cfg {String} 
         * Field on the inside records that holds the size of the slice
         */
        inside_size_field: 'PlanEstimate',
        /**
         * @cfg [{Ext.data.Model}] 
         * Records that will each have a slice of the outside pie
         */
        outside_records: [],
        /**
         * @cfg {String} 
         * Field on the outside records that holds the size of the slice
         */
        outside_size_field: 'Estimate',
        /**
         * @cfg {String} 
         * Field on the outside records links to the inside record
         */
        record_link_field: 'WorkProduct'
        
    },
    
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function() {
        this.data = this._calculateSlices();
        //this.items = this._buildItems();
        this.callParent(arguments);
    },
    
    calculateSlices: function() {
        return [];
    },
    
    _buildItems: function() {
        var items = [];
        
        items.push({ 
            xtype: 'container', 
            itemId:'days',
            cellCls: 'clock-counter',
            tpl: '{days:leftPad(3,"0")}'
        });
        
        items.push({ 
            xtype: 'container', 
            itemId:'hours',
            cellCls: 'clock-counter',
            tpl: '{hours:leftPad(2,"0")}'
        });
        
        items.push({ 
            xtype: 'container', 
            itemId:'minutes',
            cellCls: 'clock-counter',
            tpl: '{minutes:leftPad(2,"0")}'
        });
        
        items.push( { 
            xtype: 'container', 
            itemId:'seconds',
            cellCls: 'clock-counter',
            tpl: '{seconds:leftPad(2,"0")}'
        });
        
        items.push({
            xtype: 'container',
            cellCls: 'clock-label',
            html: 'DAYS'
        });
        
        items.push({
            xtype: 'container',
            cellCls: 'clock-label',
            html: 'HOURS'
        });
        
        items.push({
            xtype: 'container',
            cellCls: 'clock-label',
            html: 'MINUTES'
        });
       
        
        items.push({
            xtype: 'container',
            cellCls: 'clock-label',
            html: 'SECONDS'
        });

        
        return items;
    }
});
Ext.define("TSStoryProgressPie", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        var me = this;
        
        var team_filters = [{property:'ObjectID',operator:'>',value:0}];

        Deft.Chain.sequence([
            function() { return me._loadAStoreWithAPromise('UserStory', ['PlanEstimate','FormattedID'], team_filters); },
            function() { return me._loadAStoreWithAPromise('Task', ['Estimate','FormattedID','WorkProduct','PlanEstimate'], team_filters); }
            
        ]).then({
            scope: this,
            success: function(results) {
                var stories = results[0];
                var tasks = results[1];
                
                this._makePie(stories,tasks);
            },
            failure: function(error_message){
                alert(error_message);
            }
        }).always(function() {
            me.setLoading(false);
        });
    },
    _loadAStoreWithAPromise: function(model_name, model_fields,filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            filters: filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _makePie: function(inside_records,outside_records){
        var container =  this.down('#display_box');
        
        container.removeAll();
        container.add({
            xtype: 'tsdoughnut',
            inside_records: inside_records,
            inside_size_field: 'PlanEstimate',
            outside_records: outside_records,
            outside_size_field: 'Estimate'
        });
    }
});

            
               Rally.launchApp('TSStoryProgressPie', {
                   name: 'Story Progress Pie'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>